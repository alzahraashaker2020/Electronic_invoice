// <auto-generated />
using System;
using DAL.Models;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace DAL.Migrations
{
    [DbContext(typeof(Invoice_ElectronicContext))]
    [Migration("20220410005636_countryEdit")]
    partial class countryEdit
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("Relational:Collation", "Arabic_CI_AS")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("ProductVersion", "5.0.7")
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("DAL.Models.ActivityType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Adescription")
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)")
                        .HasColumnName("ADescription");

                    b.Property<string>("Code")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)")
                        .HasColumnName("code");

                    b.Property<string>("Edescription")
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)")
                        .HasColumnName("EDescription");

                    b.HasKey("Id");

                    b.ToTable("ActivityTypes");
                });

            modelBuilder.Entity("DAL.Models.Address", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("AddressPropId")
                        .HasColumnType("int")
                        .HasColumnName("address_prop_id");

                    b.Property<int?>("BranchId")
                        .HasColumnType("int")
                        .HasColumnName("branch_Id");

                    b.Property<int?>("CountryId")
                        .HasColumnType("int")
                        .HasColumnName("country_id");

                    b.Property<int?>("UserId")
                        .HasColumnType("int")
                        .HasColumnName("user_id");

                    b.HasKey("Id");

                    b.HasIndex("AddressPropId");

                    b.HasIndex("BranchId");

                    b.HasIndex("CountryId");

                    b.HasIndex("UserId");

                    b.ToTable("Address");
                });

            modelBuilder.Entity("DAL.Models.AddressProperty", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Caption")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)")
                        .HasColumnName("caption");

                    b.Property<int?>("ControllerId")
                        .HasColumnType("int")
                        .HasColumnName("controller_id");

                    b.Property<bool?>("HasValidation")
                        .HasColumnType("bit")
                        .HasColumnName("hasValidation");

                    b.Property<string>("Name")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasColumnName("name");

                    b.Property<string>("Notes")
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)")
                        .HasColumnName("notes");

                    b.Property<string>("Type")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)")
                        .HasColumnName("type");

                    b.HasKey("Id");

                    b.HasIndex("ControllerId");

                    b.ToTable("Address_Property");
                });

            modelBuilder.Entity("DAL.Models.AddressPropertyEvent", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("AddressPropertyId")
                        .HasColumnType("int")
                        .HasColumnName("addressProperty_id");

                    b.Property<int?>("EventId")
                        .HasColumnType("int")
                        .HasColumnName("event_id");

                    b.Property<string>("Notes")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)")
                        .HasColumnName("notes");

                    b.HasKey("Id");

                    b.HasIndex("AddressPropertyId");

                    b.HasIndex("EventId");

                    b.ToTable("AddressProperty_Events");
                });

            modelBuilder.Entity("DAL.Models.AddressPropertyValidation", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("AddressPropertyId")
                        .HasColumnType("int")
                        .HasColumnName("addressProperty_id");

                    b.Property<string>("Name")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)")
                        .HasColumnName("name");

                    b.Property<int?>("ValidationId")
                        .HasColumnType("int")
                        .HasColumnName("validation_id");

                    b.Property<string>("Value")
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)")
                        .HasColumnName("value");

                    b.HasKey("Id");

                    b.HasIndex("AddressPropertyId");

                    b.HasIndex("ValidationId");

                    b.ToTable("AddressProperty_Validations");
                });

            modelBuilder.Entity("DAL.Models.Branch", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Identification")
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)")
                        .HasColumnName("identification");

                    b.Property<string>("Name")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasColumnName("name");

                    b.HasKey("Id");

                    b.ToTable("Branches");
                });

            modelBuilder.Entity("DAL.Models.Country", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Code")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)")
                        .HasColumnName("code");

                    b.Property<string>("Desc_ar")
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)")
                        .HasColumnName("Desc_ar");

                    b.Property<string>("Desc_en")
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)")
                        .HasColumnName("Desc_en");

                    b.HasKey("Id");

                    b.ToTable("Countries");
                });

            modelBuilder.Entity("DAL.Models.Delivery", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Approach")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)")
                        .HasColumnName("approach");

                    b.Property<string>("CountryOfOrigin")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)")
                        .HasColumnName("countryOfOrigin");

                    b.Property<DateTime?>("DateValidity")
                        .HasColumnType("datetime")
                        .HasColumnName("dateValidity");

                    b.Property<string>("ExportPort")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)")
                        .HasColumnName("exportPort");

                    b.Property<decimal?>("GrossWeight")
                        .HasColumnType("decimal(18,0)")
                        .HasColumnName("grossWeight");

                    b.Property<decimal?>("NetWeight")
                        .HasColumnType("decimal(18,0)")
                        .HasColumnName("netWeight");

                    b.Property<string>("Packaging")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)")
                        .HasColumnName("packaging");

                    b.Property<string>("Terms")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)")
                        .HasColumnName("terms");

                    b.HasKey("Id");

                    b.ToTable("Delivery");
                });

            modelBuilder.Entity("DAL.Models.Discount", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<decimal?>("Amount")
                        .HasColumnType("decimal(18,0)")
                        .HasColumnName("amount");

                    b.Property<decimal?>("Rate")
                        .HasColumnType("decimal(18,0)")
                        .HasColumnName("rate");

                    b.HasKey("Id");

                    b.ToTable("Discounts");
                });

            modelBuilder.Entity("DAL.Models.Document", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("DateTimeIssued")
                        .HasColumnType("datetime")
                        .HasColumnName("dateTime_issued");

                    b.Property<int?>("DeliveryId")
                        .HasColumnType("int")
                        .HasColumnName("delivery_id");

                    b.Property<string>("DocumentType")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)")
                        .HasColumnName("document_type");

                    b.Property<string>("DocumentTypeVersion")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)")
                        .HasColumnName("document_type_version");

                    b.Property<decimal?>("ExtraDiscAmount")
                        .HasColumnType("decimal(18,0)")
                        .HasColumnName("extra_disc_amount");

                    b.Property<string>("InternalId")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)")
                        .HasColumnName("internalId");

                    b.Property<int>("IssuerId")
                        .HasColumnType("int")
                        .HasColumnName("issuer_id");

                    b.Property<decimal?>("NetAmount")
                        .HasColumnType("decimal(18,0)")
                        .HasColumnName("net_amount");

                    b.Property<int?>("PaymentId")
                        .HasColumnType("int")
                        .HasColumnName("payment_id");

                    b.Property<string>("ProformaInvoiceNumber")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)")
                        .HasColumnName("proformaInvoiceNumber");

                    b.Property<string>("PurchaseOrderDescrip")
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)")
                        .HasColumnName("purchase_order_descrip");

                    b.Property<string>("PurchaseOrderRef")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)")
                        .HasColumnName("purchase_order_ref");

                    b.Property<int>("ReceiverId")
                        .HasColumnType("int")
                        .HasColumnName("receiver_id");

                    b.Property<string>("SalesOrderDescrip")
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)")
                        .HasColumnName("sales_order_descrip");

                    b.Property<string>("SalesOrderRef")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)")
                        .HasColumnName("sales_order_ref");

                    b.Property<string>("TaxpayerActivCode")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)")
                        .HasColumnName("taxpayer_activ_code");

                    b.Property<decimal?>("TotaSalesAmount")
                        .HasColumnType("decimal(18,0)")
                        .HasColumnName("tota_sales_amount");

                    b.Property<decimal?>("TotalAmount")
                        .HasColumnType("decimal(18,0)")
                        .HasColumnName("total_amount");

                    b.Property<decimal?>("TotalDiscAmount")
                        .HasColumnType("decimal(18,0)")
                        .HasColumnName("total_disc_amount");

                    b.Property<decimal?>("TotalItemDiscAmount")
                        .HasColumnType("decimal(18,0)")
                        .HasColumnName("total_item_disc_amount");

                    b.HasKey("Id");

                    b.HasIndex("DeliveryId");

                    b.HasIndex("IssuerId");

                    b.HasIndex("PaymentId");

                    b.HasIndex("ReceiverId");

                    b.ToTable("Documents");
                });

            modelBuilder.Entity("DAL.Models.Event", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Action")
                        .HasMaxLength(2000)
                        .HasColumnType("nvarchar(2000)")
                        .HasColumnName("action");

                    b.Property<string>("Name")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)")
                        .HasColumnName("name");

                    b.HasKey("Id");

                    b.ToTable("Events");
                });

            modelBuilder.Entity("DAL.Models.InputController", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Description")
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)")
                        .HasColumnName("description");

                    b.Property<string>("Name")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)")
                        .HasColumnName("name");

                    b.HasKey("Id");

                    b.ToTable("InputControllers");
                });

            modelBuilder.Entity("DAL.Models.InvoiceLine", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Description")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)")
                        .HasColumnName("description");

                    b.Property<int?>("DiscountId")
                        .HasColumnType("int")
                        .HasColumnName("discount_id");

                    b.Property<int?>("DocumentId")
                        .HasColumnType("int")
                        .HasColumnName("document_id");

                    b.Property<string>("InternalCode")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)")
                        .HasColumnName("internalCode");

                    b.Property<string>("ItemCode")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)")
                        .HasColumnName("itemCode");

                    b.Property<string>("ItemType")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)")
                        .HasColumnName("itemType");

                    b.Property<decimal?>("ItemsDiscount")
                        .HasColumnType("decimal(18,0)")
                        .HasColumnName("itemsDiscount");

                    b.Property<decimal?>("NetTotal")
                        .HasColumnType("decimal(18,0)")
                        .HasColumnName("netTotal");

                    b.Property<decimal?>("Quantity")
                        .HasColumnType("decimal(18,0)")
                        .HasColumnName("quantity");

                    b.Property<decimal?>("SalesTotal")
                        .HasColumnType("decimal(18,0)")
                        .HasColumnName("salesTotal");

                    b.Property<decimal?>("Total")
                        .HasColumnType("decimal(18,0)")
                        .HasColumnName("total");

                    b.Property<decimal?>("TotalTaxableFees")
                        .HasColumnType("decimal(18,0)")
                        .HasColumnName("totalTaxableFees");

                    b.Property<int?>("UnitTypeId")
                        .HasColumnType("int")
                        .HasColumnName("unitType_id");

                    b.Property<int?>("UnitValueId")
                        .HasColumnType("int")
                        .HasColumnName("unitValue_id");

                    b.Property<decimal?>("ValueDifference")
                        .HasColumnType("decimal(18,0)")
                        .HasColumnName("valueDifference");

                    b.HasKey("Id");

                    b.HasIndex("DiscountId");

                    b.HasIndex("DocumentId");

                    b.HasIndex("UnitTypeId");

                    b.HasIndex("UnitValueId");

                    b.ToTable("Invoice_Line");
                });

            modelBuilder.Entity("DAL.Models.Payment", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("BankAccountIban")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)")
                        .HasColumnName("bankAccountIBAN");

                    b.Property<string>("BankAddress")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)")
                        .HasColumnName("bankAddress");

                    b.Property<string>("BankName")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)")
                        .HasColumnName("bankName");

                    b.Property<string>("SwiftCode")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)")
                        .HasColumnName("swiftCode");

                    b.Property<string>("Terms")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)")
                        .HasColumnName("terms");

                    b.HasKey("Id");

                    b.ToTable("Payments");
                });

            modelBuilder.Entity("DAL.Models.Role", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Name")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasColumnName("name");

                    b.HasKey("Id");

                    b.ToTable("Roles");
                });

            modelBuilder.Entity("DAL.Models.Signature", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("IssureId")
                        .HasColumnType("int")
                        .HasColumnName("issure_id");

                    b.Property<int?>("RecieverId")
                        .HasColumnType("int")
                        .HasColumnName("reciever_id");

                    b.Property<string>("Type")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("type");

                    b.Property<string>("Value")
                        .HasMaxLength(500)
                        .HasColumnType("nchar(500)")
                        .HasColumnName("value")
                        .IsFixedLength(true);

                    b.HasKey("Id");

                    b.HasIndex("IssureId");

                    b.HasIndex("RecieverId");

                    b.ToTable("Signature");
                });

            modelBuilder.Entity("DAL.Models.TaxSubType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Adescription")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)")
                        .HasColumnName("ADescription");

                    b.Property<string>("Code")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasColumnName("code");

                    b.Property<string>("Edescription")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)")
                        .HasColumnName("EDescription");

                    b.Property<int?>("TaxTypeId")
                        .HasColumnType("int")
                        .HasColumnName("taxType_id");

                    b.HasKey("Id");

                    b.HasIndex("TaxTypeId");

                    b.ToTable("Tax_SubTypes");
                });

            modelBuilder.Entity("DAL.Models.TaxableItem", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<decimal?>("Amount")
                        .HasColumnType("decimal(18,0)")
                        .HasColumnName("amount");

                    b.Property<int?>("InvoiceLineId")
                        .HasColumnType("int")
                        .HasColumnName("invoiceLine_id");

                    b.Property<decimal?>("Rate")
                        .HasColumnType("decimal(18,0)")
                        .HasColumnName("rate");

                    b.Property<int?>("SubTypeId")
                        .HasColumnType("int")
                        .HasColumnName("subType_id");

                    b.Property<int?>("TaxTypeId")
                        .HasColumnType("int")
                        .HasColumnName("taxType_id");

                    b.HasKey("Id");

                    b.HasIndex("InvoiceLineId");

                    b.HasIndex("SubTypeId");

                    b.HasIndex("TaxTypeId");

                    b.ToTable("Taxable_Item");
                });

            modelBuilder.Entity("DAL.Models.TaxableType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Adescription")
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)")
                        .HasColumnName("ADescription");

                    b.Property<string>("Code")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasColumnName("code");

                    b.Property<string>("Edescription")
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)")
                        .HasColumnName("EDescription");

                    b.HasKey("Id");

                    b.ToTable("Taxable_Types");
                });

            modelBuilder.Entity("DAL.Models.UniteType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Aname")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)")
                        .HasColumnName("AName");

                    b.Property<string>("Code")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)")
                        .HasColumnName("code");

                    b.Property<string>("Ename")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)")
                        .HasColumnName("EName");

                    b.HasKey("Id");

                    b.ToTable("Unite_Types");
                });

            modelBuilder.Entity("DAL.Models.UniteValue", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<decimal?>("AmountEgp")
                        .HasColumnType("decimal(18,0)")
                        .HasColumnName("amountEGP");

                    b.Property<decimal?>("AmountSold")
                        .HasColumnType("decimal(18,0)")
                        .HasColumnName("amountSold");

                    b.Property<decimal?>("CurrencyExchangeRate")
                        .HasColumnType("decimal(18,0)")
                        .HasColumnName("currencyExchangeRate");

                    b.Property<string>("CurrencySold")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)")
                        .HasColumnName("currencySold");

                    b.HasKey("Id");

                    b.ToTable("UniteValues");
                });

            modelBuilder.Entity("DAL.Models.User", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("ActivityTypeId")
                        .HasColumnType("int")
                        .HasColumnName("activityType_id");

                    b.Property<string>("Identification")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)")
                        .HasColumnName("identification");

                    b.Property<string>("Name")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasColumnName("name");

                    b.Property<int?>("RoleId")
                        .HasColumnType("int")
                        .HasColumnName("role_id");

                    b.Property<int?>("SignatureId")
                        .HasColumnType("int")
                        .HasColumnName("signature_id");

                    b.Property<string>("Type")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("type");

                    b.HasKey("Id");

                    b.HasIndex("ActivityTypeId");

                    b.HasIndex("RoleId");

                    b.ToTable("Users");
                });

            modelBuilder.Entity("DAL.Models.Validation", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ControllerNames")
                        .HasMaxLength(3900)
                        .HasColumnType("nvarchar(3900)")
                        .HasColumnName("controllerNames");

                    b.Property<bool?>("HasValue")
                        .HasColumnType("bit")
                        .HasColumnName("hasValue");

                    b.Property<string>("Name")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)")
                        .HasColumnName("name");

                    b.Property<int?>("ValidationTypeId")
                        .HasColumnType("int")
                        .HasColumnName("validationType_id");

                    b.HasKey("Id");

                    b.HasIndex("ValidationTypeId");

                    b.ToTable("Validations");
                });

            modelBuilder.Entity("DAL.Models.ValidationType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Description")
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)")
                        .HasColumnName("description");

                    b.Property<string>("Name")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)")
                        .HasColumnName("name");

                    b.HasKey("Id");

                    b.ToTable("Validation_Types");
                });

            modelBuilder.Entity("DAL.Models.Address", b =>
                {
                    b.HasOne("DAL.Models.AddressProperty", "AddressProp")
                        .WithMany("Addresses")
                        .HasForeignKey("AddressPropId")
                        .HasConstraintName("FK_Address_Address_Property");

                    b.HasOne("DAL.Models.Branch", "Branch")
                        .WithMany("Addresses")
                        .HasForeignKey("BranchId")
                        .HasConstraintName("FK_Address_Branches");

                    b.HasOne("DAL.Models.Country", "Country")
                        .WithMany("Addresses")
                        .HasForeignKey("CountryId")
                        .HasConstraintName("FK_Address_Countries");

                    b.HasOne("DAL.Models.User", "User")
                        .WithMany("Addresses")
                        .HasForeignKey("UserId")
                        .HasConstraintName("FK_Address_Users");

                    b.Navigation("AddressProp");

                    b.Navigation("Branch");

                    b.Navigation("Country");

                    b.Navigation("User");
                });

            modelBuilder.Entity("DAL.Models.AddressProperty", b =>
                {
                    b.HasOne("DAL.Models.InputController", "Controller")
                        .WithMany("AddressProperties")
                        .HasForeignKey("ControllerId")
                        .HasConstraintName("FK_Address_Property_Controllers");

                    b.Navigation("Controller");
                });

            modelBuilder.Entity("DAL.Models.AddressPropertyEvent", b =>
                {
                    b.HasOne("DAL.Models.AddressProperty", "AddressProperty")
                        .WithMany("AddressPropertyEvents")
                        .HasForeignKey("AddressPropertyId")
                        .HasConstraintName("FK_AddressProperty_Events_Address_Property");

                    b.HasOne("DAL.Models.Event", "Event")
                        .WithMany("AddressPropertyEvents")
                        .HasForeignKey("EventId")
                        .HasConstraintName("FK_AddressProperty_Events_Events");

                    b.Navigation("AddressProperty");

                    b.Navigation("Event");
                });

            modelBuilder.Entity("DAL.Models.AddressPropertyValidation", b =>
                {
                    b.HasOne("DAL.Models.AddressProperty", "AddressProperty")
                        .WithMany("AddressPropertyValidations")
                        .HasForeignKey("AddressPropertyId")
                        .HasConstraintName("FK_AddressProperty_Validations_Address_Property");

                    b.HasOne("DAL.Models.Validation", "Validation")
                        .WithMany("AddressPropertyValidations")
                        .HasForeignKey("ValidationId")
                        .HasConstraintName("FK_AddressProperty_Validations_Validations");

                    b.Navigation("AddressProperty");

                    b.Navigation("Validation");
                });

            modelBuilder.Entity("DAL.Models.Document", b =>
                {
                    b.HasOne("DAL.Models.Delivery", "Delivery")
                        .WithMany("Documents")
                        .HasForeignKey("DeliveryId")
                        .HasConstraintName("FK_Documents_Delivery");

                    b.HasOne("DAL.Models.User", "Issuer")
                        .WithMany("DocumentIssuers")
                        .HasForeignKey("IssuerId")
                        .HasConstraintName("FK_Documents_Users")
                        .IsRequired();

                    b.HasOne("DAL.Models.Payment", "Payment")
                        .WithMany("Documents")
                        .HasForeignKey("PaymentId")
                        .HasConstraintName("FK_Documents_Payments");

                    b.HasOne("DAL.Models.User", "Receiver")
                        .WithMany("DocumentReceivers")
                        .HasForeignKey("ReceiverId")
                        .HasConstraintName("FK_Documents_Users1")
                        .IsRequired();

                    b.Navigation("Delivery");

                    b.Navigation("Issuer");

                    b.Navigation("Payment");

                    b.Navigation("Receiver");
                });

            modelBuilder.Entity("DAL.Models.InvoiceLine", b =>
                {
                    b.HasOne("DAL.Models.Discount", "Discount")
                        .WithMany("InvoiceLines")
                        .HasForeignKey("DiscountId")
                        .HasConstraintName("FK_Invoice_Line_Discounts");

                    b.HasOne("DAL.Models.Document", "Document")
                        .WithMany("InvoiceLines")
                        .HasForeignKey("DocumentId")
                        .HasConstraintName("FK_Invoice_Line_Documents");

                    b.HasOne("DAL.Models.UniteType", "UnitType")
                        .WithMany("InvoiceLines")
                        .HasForeignKey("UnitTypeId")
                        .HasConstraintName("FK_Invoice_Line_Unite_Types");

                    b.HasOne("DAL.Models.UniteValue", "UnitValue")
                        .WithMany("InvoiceLines")
                        .HasForeignKey("UnitValueId")
                        .HasConstraintName("FK_Invoice_Line_UniteValues");

                    b.Navigation("Discount");

                    b.Navigation("Document");

                    b.Navigation("UnitType");

                    b.Navigation("UnitValue");
                });

            modelBuilder.Entity("DAL.Models.Signature", b =>
                {
                    b.HasOne("DAL.Models.User", "Issure")
                        .WithMany("SignatureIssures")
                        .HasForeignKey("IssureId")
                        .HasConstraintName("FK_Signature_Users");

                    b.HasOne("DAL.Models.User", "Reciever")
                        .WithMany("SignatureRecievers")
                        .HasForeignKey("RecieverId")
                        .HasConstraintName("FK_Signature_Users1");

                    b.Navigation("Issure");

                    b.Navigation("Reciever");
                });

            modelBuilder.Entity("DAL.Models.TaxSubType", b =>
                {
                    b.HasOne("DAL.Models.TaxableType", "TaxType")
                        .WithMany("TaxSubTypes")
                        .HasForeignKey("TaxTypeId")
                        .HasConstraintName("FK_Tax_SubTypes_Taxable_Types");

                    b.Navigation("TaxType");
                });

            modelBuilder.Entity("DAL.Models.TaxableItem", b =>
                {
                    b.HasOne("DAL.Models.InvoiceLine", "InvoiceLine")
                        .WithMany("TaxableItems")
                        .HasForeignKey("InvoiceLineId")
                        .HasConstraintName("FK_Taxable_Item_Invoice_Line");

                    b.HasOne("DAL.Models.TaxSubType", "SubType")
                        .WithMany("TaxableItems")
                        .HasForeignKey("SubTypeId")
                        .HasConstraintName("FK_Taxable_Item_Tax_SubTypes");

                    b.HasOne("DAL.Models.TaxableType", "TaxType")
                        .WithMany("TaxableItems")
                        .HasForeignKey("TaxTypeId")
                        .HasConstraintName("FK_Taxable_Item_Taxable_Types");

                    b.Navigation("InvoiceLine");

                    b.Navigation("SubType");

                    b.Navigation("TaxType");
                });

            modelBuilder.Entity("DAL.Models.User", b =>
                {
                    b.HasOne("DAL.Models.ActivityType", "ActivityType")
                        .WithMany("Users")
                        .HasForeignKey("ActivityTypeId")
                        .HasConstraintName("FK_Users_ActivityTypes");

                    b.HasOne("DAL.Models.Role", "Role")
                        .WithMany("Users")
                        .HasForeignKey("RoleId")
                        .HasConstraintName("FK_Users_Roles");

                    b.Navigation("ActivityType");

                    b.Navigation("Role");
                });

            modelBuilder.Entity("DAL.Models.Validation", b =>
                {
                    b.HasOne("DAL.Models.ValidationType", "ValidationType")
                        .WithMany("Validations")
                        .HasForeignKey("ValidationTypeId")
                        .HasConstraintName("FK_Validations_Validation_Types");

                    b.Navigation("ValidationType");
                });

            modelBuilder.Entity("DAL.Models.ActivityType", b =>
                {
                    b.Navigation("Users");
                });

            modelBuilder.Entity("DAL.Models.AddressProperty", b =>
                {
                    b.Navigation("Addresses");

                    b.Navigation("AddressPropertyEvents");

                    b.Navigation("AddressPropertyValidations");
                });

            modelBuilder.Entity("DAL.Models.Branch", b =>
                {
                    b.Navigation("Addresses");
                });

            modelBuilder.Entity("DAL.Models.Country", b =>
                {
                    b.Navigation("Addresses");
                });

            modelBuilder.Entity("DAL.Models.Delivery", b =>
                {
                    b.Navigation("Documents");
                });

            modelBuilder.Entity("DAL.Models.Discount", b =>
                {
                    b.Navigation("InvoiceLines");
                });

            modelBuilder.Entity("DAL.Models.Document", b =>
                {
                    b.Navigation("InvoiceLines");
                });

            modelBuilder.Entity("DAL.Models.Event", b =>
                {
                    b.Navigation("AddressPropertyEvents");
                });

            modelBuilder.Entity("DAL.Models.InputController", b =>
                {
                    b.Navigation("AddressProperties");
                });

            modelBuilder.Entity("DAL.Models.InvoiceLine", b =>
                {
                    b.Navigation("TaxableItems");
                });

            modelBuilder.Entity("DAL.Models.Payment", b =>
                {
                    b.Navigation("Documents");
                });

            modelBuilder.Entity("DAL.Models.Role", b =>
                {
                    b.Navigation("Users");
                });

            modelBuilder.Entity("DAL.Models.TaxSubType", b =>
                {
                    b.Navigation("TaxableItems");
                });

            modelBuilder.Entity("DAL.Models.TaxableType", b =>
                {
                    b.Navigation("TaxableItems");

                    b.Navigation("TaxSubTypes");
                });

            modelBuilder.Entity("DAL.Models.UniteType", b =>
                {
                    b.Navigation("InvoiceLines");
                });

            modelBuilder.Entity("DAL.Models.UniteValue", b =>
                {
                    b.Navigation("InvoiceLines");
                });

            modelBuilder.Entity("DAL.Models.User", b =>
                {
                    b.Navigation("Addresses");

                    b.Navigation("DocumentIssuers");

                    b.Navigation("DocumentReceivers");

                    b.Navigation("SignatureIssures");

                    b.Navigation("SignatureRecievers");
                });

            modelBuilder.Entity("DAL.Models.Validation", b =>
                {
                    b.Navigation("AddressPropertyValidations");
                });

            modelBuilder.Entity("DAL.Models.ValidationType", b =>
                {
                    b.Navigation("Validations");
                });
#pragma warning restore 612, 618
        }
    }
}
